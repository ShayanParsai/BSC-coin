pragma solidity ^0.8.7;

/*
    -1,5% fee auto distribute to all holders
    -2% fee add to the liquidity pool, locked forever when selling
    -2,5% fee to marketing wallet
    
    21,000,000 total supply
    42,000 tokens limitation for trade, 0.2% of the total supply
*/  

/* 
    Tokenomics
    50% public sale
    28% burn
    10% staking
    5%  marketing
    3%  charity
    3%  giveaways
    1%  dev wallet
*/    

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 21000000 * 10 ** 18;
    string public name = "CryptoCity";
    string public symbol = "CCITY";
    uint public decimals = 18;

    
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    event Purchase(
        address indexed _buyer,
        uint256 _amount
    );

    constructor(address payable _wallet) public {
        wallet = _wallet;
        balances[msg.sender] = totalSupply;
    }

    function() external payable {
        buyToken();
    }

    function buyToken() public payable {
        // buy a token
        balances[msg.sender] += 1;
        // send ether to the wallet
        wallet.transfer(msg.value);
        emit Purchase(msg.sender, 1);
    }
    
    function balanceOf(address owner) public returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
       emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }

    function setTaxFeePercent(uint256 taxFee) external onlyOwner() { _taxFee = taxFee; }

    function removeAllFee() private {
        if(_taxFee == 0 && _liquidityFee == 0 && _PancakeFee == 0 && _marketingFee == 0) return;

        _previousTaxFee = _taxFee;
        _previousLiquidityFee = _liquidityFee;
		_previousPancakeFee = _PancakeFee;
		_previousMarketingFee = _marketingFee;

        _taxFee = 0;
        _liquidityFee = 0;
		_marketingFee = 0;
		_PancakeFee = 0;
    }

    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _liquidityFee = _previousLiquidityFee;
		_marketingFee = _previousMarketingFee;
		_islandFee = _previousIslandFee;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}
